/*
 * Lab8_1.c
 * 문제1. "CLCD에 내 좌우명 새기기"의 작품에 스위치(SW1)를 추가하여 스위치를 한 번 누르면 디스플레이가 꺼지고,
 다시 한 번 누르면 디스플레이가 켜지는 "CLCD에 내 좌우명 새기기(V2.0)"을 제작한다.
 */ 

#include <avr/io.h>
#define	F_CPU 16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>

#define NULL 0x00

// CLCD Command & Data
#define BIT4_LINE2_DOT58 0x28             // 4bit mode, 2 lines, 5*8 Dot
#define DISPON_CUROFF_BLKOFF 0x0C         // Display on, Cursor off, Blink off
#define DISPOFF_CUROFF_BLKOFF 0x08        // Display off, Cursor off, Blink off
#define INC_NOSHIFT 0x06                  // Entry mode, Cursor Increment, Display no shift

#define DISPCLEAR 0x01                    // Display clear, address 0, position, cursor 0
#define CUR1LINE 0x80                     // cursor position line 1 first
#define CUR2LINE 0xC0                     // cursor position line 2 first
#define CURHOME 0x02                      // cursor home
#define E_BIT 0x04                        // Enable bit #
#define  RW_BIT 0x03                      // Read Write bit #
#define  RS_BIT 0x02                      // Register select bit #

// 동작 ON/OFF하기 위한 상태 값 정의
#define ON 1       // ON 상태 값
#define OFF 0      // OFF 상태 값

volatile int state = ON;  // 처음 시작시에 ON 상태에서 출발

void CLCD_cmd(char);              // 명령어 전송 함수
void CLCD_data(char);             // 데이터 write 함수
void CLCD_puts(char*);            // 문자열 처리 함수
char motto1[]="Slow & Steady";    // 좌우명 첫째 줄
char motto2[]="Wins the Game!";   // 좌우명 둘째 줄


ISR(INT4_vect)     // INT4 인터럽트 발생시
{
	_delay_ms(100);            // 스위치 바운스 기간 동안 기다림
	EIFR = 1<<4;               // 그 사이에 바운스에 의하여 생긴 인터럽트 무효화
	if((PINE&0x10)==0x10)      // 인터럽트 입력 핀(PE4)을 다시 검사하여
	{	
		return;                // 눌러진 상태가 아니면 인터럽트가 아니므로 그냥 리턴
	}
	
	if (state == OFF)          // state가 OFF면 
	{
		state = ON;            // state를 ON으로 변경
	}
	else if (state == ON)      // state가 ON이면
	{
		CLCD_cmd(DISPCLEAR);   // command를 지우고
		state = OFF;           // state를 OFF로 변경
	}
}

int main(void)
{
    _delay_ms(50);       // 전원 인가후 CLCD 셋업 시간
	DDRC = 0xff;         // PORTC : CLCD 데이터 신호 할당
	DDRD = 0xff;         // PORTD : CLCD 제어 신호 할당  
	DDRE = 0x00;         // PORTE : 스위치 
	sei();               // SREG 7번 비트 세트
	
	EICRB = 0x02;        // INT4 트리거 하강 에지(Failing Edge)
	EIMSK = 0x10;        // INT4 인터럽트 enable
		
	CLCD_cmd(BIT4_LINE2_DOT58);        // 4bit mode, 2 lines, 5*8 dot
	CLCD_cmd(DISPON_CUROFF_BLKOFF);    // display on, cursor off, blink off
	CLCD_cmd(INC_NOSHIFT);             // entry mode, cursor increment, display no shift
	CLCD_cmd(DISPCLEAR);   // Dispaly clear, address 0, position, cursor 0
	
	_delay_ms(2);        // 디스플레이 클리어 실행 시간 동안 대기 
	
    while (1) 
    {
		if (state==ON)  // state가 ON이면 CLCD에 좌우명 표시
		{
			CLCD_cmd(CUR1LINE);       // Cursor position line 1 first
			CLCD_puts(motto1);        // 좌우명 첫째 줄 디스플레이
			CLCD_cmd(CUR2LINE);       // Cursor position line 2 first
			CLCD_puts(motto2);        // 좌우명 둘째 줄 디스플레이
			CLCD_cmd(DISPON_CUROFF_BLKOFF);   // Display on, Cursor off, Blink off 
		}
		else if (state==OFF)
		{	
			CLCD_cmd(DISPOFF_CUROFF_BLKOFF);  // Display off, Cursor off, Blink off
		}
    }
}
      
void CLCD_puts(char *ptr)
{
	while (*ptr != NULL)       // 문자열이 마지막(NULL)인지 검사
	{
		CLCD_data(*ptr++);     // 마지막이 아니면 1문자 디스플레이
	}
}
void CLCD_data(char data)
{
	PORTD = 0x04;         // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=1, Write 사이클, 데이터 모드
	
	_delay_us(1);         // setup time
	PORTD = 0x14;         // 0b00010100, E(bit4)=1, R/W(bit3)=0, RS(bit2)=1 enable
	
	PORTC = data & 0xf0;  // 8비트 데이트 중 상위 4비트 준비
	PORTD = 0x04;         // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=1, Write 사이클, 데이터 모드
	
	_delay_us(2);         // hold time & setup time
	PORTD = 0x14;         // 0b00010100, E(bit4)=1, R/W(bit3)=0, RS(bit2)=1 enable
	
	PORTC = (data<<4) & 0xf0;  // 8비트 데이터 중 하위 4비트 준비
	PORTD = 0x04;         // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=1, Write 사이클, 데이터 모드
	
	_delay_ms(1);         // hold time & Execution time  
}

void CLCD_cmd(char cmd)
{
	PORTD = 0x00;        // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=0, Write 사이클, 데이터 모드
	
	_delay_us(1);        // setup time
	PORTD = 0x10;        // 0b00010100, E(bit4)=1, R/W(bit3)=0, RS(bit2)=0 enable
	
	PORTC = cmd & 0xf0;  // 8비트 데이트 중 상위 4비트 준비
	PORTD = 0x00;        // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=0, Write 사이클, 데이터 모드
	
	_delay_us(2);        // hold time & setup time
	PORTD = 0x10;        // 0b00010100, E(bit4)=1, R/W(bit3)=0, RS(bit2)=0 enable
	
	PORTC = (cmd<<4) & 0xf0;  // 8비트 데이터 중 하위 4비트 준비
	PORTD = 0x00;        // 0b00000100, E(bit4)=0, R/W(bit3)=0, RS(bit2)=0, Write 사이클, 데이터 모드
	
	_delay_ms(1);        // hold time & Execution time  
}