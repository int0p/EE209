/*온도센서로 디지털 체온계 만들기.
- 스위치가 눌려졌을 떄 처리하는 인터럽트 서비스 루틴에서는, 온도계 모드이면 현재의 온도를 저장한 후 모드를 체온계 모드로 바꿈. 
-- 체온계모드이면 모드만 온도계 모드로 변경. 
- 메인 프로그램에서는, 온도계 모드인 경우는 항상 온도를 새로 읽어와 그 값을 디스플레이하고, 
-- 체온계 모드인 경우는 저장된 온도를 디스플레이하되 0.3초 동안은 정상적으로, 다음 0.3초 동안은 디스플레이를 off시킴. 
! '포인터 지정 2바이트 read'로 구현한 부분을 '포인터 지정'과 '포인터 미지정 2바이트 read'의 2단계로 나누어 구현한다. 
*/
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define F_SCK 40000UL
#define LM75A_ADDR 0x98 //A2A1A0=100인 경우 원래 7bit를 1bit left shift한 값.
#define LM75A_TEMP_REG 0 //pointer register를 temp로.

#define STOP 0 //체온계 모드
#define GO 1// 온도계 모드

volatile int temperature = 0;
volatile int stop_temp = 0;
volatile int state = GO;

void init_twi_port();
void display_FND(int value);
void write_twi(char reg);
int read_twi();

ISR(INT4_vect){
	_delay_ms(100);
	EIFR |= 1<<4;
	if((PINE & 0x10) !=0x00) return;
	if(state == STOP) state = GO; //체온계모드일 경우 
	else{
		state = STOP;
		stop_temp = read_twi();
	}
}

int main(void){
	int i;
	DDRC = 0xff;
	DDRG = 0x0f;
	DDRE = 0xef;
	EICRB = 0x02;
	EIMSK = 0x10;
	SREG |= 0x80;
	DDRA = 0xff;
	
	init_twi_port(); // twi 및 포트 초기화
	write_twi(LM75A_TEMP_REG);
	
	while(1){
		
		for(i=0;i<60;i++){
			if(state == GO){ //온도계모드
				PORTA = 0x10;
				if((i ==0)||(i==30)) temperature = read_twi();
				display_FND(temperature);
			}
			else{ //체온계 모드
				PORTA = 0x20;
				if(i<30){
					temperature = stop_temp;
					display_FND(temperature);
				}
				else{
					PORTG = 0x00;
					_delay_ms(10);
				}
			}
		}//for
		
	}
}

void init_twi_port(){
	DDRC = 0xff;
	DDRG = 0xff;
	TWSR = TWSR & 0xfc; //prescaler = 00 (1배)
	TWBR = (F_CPU/F_SCK - 16)/2; //bit rate 설정
}

void write_twi(char reg){
	/////////////////W
	//START 전송
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	
	//상태체크
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X08);
	
	//SLA + W
	TWDR = LM75A_ADDR |0; //TWDR에 SLA + W set
	TWCR = (1<<TWINT) | (1<<TWEN); //SLA + W 전송
	
	//ACK 체크
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X18);
	
	//TWDR에 데이터값 set
	TWDR = reg;
	
	//데이터 전송
	TWCR = (1<<TWINT) | (1<<TWEN);
	
	//ACK 체크
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X28);
	
	//STOP 체크
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //전송
	while((TWCR &(1<<TWSTO)));//확인
}

int read_twi(){
	char high_byte, low_byte;
	
	/////////////////R
	//RESTART 전송
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	
	//상태체크
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X08);
	
	//SLA+R
	TWDR = LM75A_ADDR |1; //read
	TWCR = (1<<TWINT) | (1<<TWEN); //SLA + R 전송
	
	//ACK체크
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X40);
	
	//데이터 수신
	TWCR = (1<<TWINT)|(1<<TWEN|1<<TWEA); //1st data 준비(마지막 데이터가 아님)
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X50); //상태체크
	high_byte = TWDR; //상위8bit저장
	
	TWCR = (1<<TWINT) | (1<<TWEN); //2nd DATA 준비(마지막 데이터)
	while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X58);//상태체크
	low_byte = TWDR;
	
	//STOP 체크
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //전송
	while((TWCR &(1<<TWSTO)));//확인
	
	return((high_byte<<8)|low_byte); //수신 DATA retur
}

void display_FND(int value){
	char digit[12] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67, 0x00, 0x40}; //[10]=0x00, [11]=0x40(-부호)
	char fnd_sel[4] = {0x01,0x02,0x04,0x08};
	int value_int, value_deci, num[4], i;
	
	//sign검사
	if((value & 0x8000)!=0x8000){
		num[3] = 10;//양수일 경우 아무것도 표시 안 함.
	}
	else{//음수일 경우 -부호 표시 후 2의 보수 취함.
		num[3] = 11;
		value = (~value)+1;
	}
	
	value_int = (char)((value & 0x7f00) >> 8); //정수값: High byte bit 6~0
	value_deci = (char)(value & 0x0080); //소수 첫째자리 값: Low byte bit7
	num[2] = (value_int/10) % 10;
	num[1] = value_int % 10;
	num[0] = (value_deci == 0x80) ? 7:0; //소수 첫째자리가 1이면 0.5에 해당하므로 5를 표시함.
	
	for (i = 0;i<4; i++){
		PORTC = digit[num[i]];
		PORTG = fnd_sel[i];
		if(i==1) PORTC |= 0x80; //왼쪽에서 3번째 FND에는 소수점(.)찍음.
		if(i%2) _delay_ms(2);
		else _delay_ms(3);
	}
}

