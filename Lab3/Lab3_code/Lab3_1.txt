/*
 * Lab3_1.c
 * 문제1. 다음의 조건을 만족하는 '초시계'를 제작한다.
 - FND 디스플레이는 1초마다 1씩 증가한다.
 - '0000'에서 시작하고 '9999' 다음은 다시 '0000'이 된다.
 - SW1을 한 번 누르면 진행을 멈추고 다시 누르면 진행한다.
 - SW2를 누르면 디스플레이는 초기 상태인 '0000'이 된다.
 */ 

#include <avr/io.h>                  //ATmega128 register 정의
#include <avr/interrupt.h>           // 인터럽트 서비스 루틴 처리시 사용
#define F_CPU 16000000UL             // _delay_ms 사용
#include <util/delay.h>              // _delay_ms 사용
#define IDLE 0                       // IDLE 상태 값
#define STOP 1                       // STOP 상태 값
#define GO 2                         // GO 상태 값

volatile int cur_time =0;            // '현재 시간' 변수 초기화
volatile int stop_time =0;           // 'STOP 시간' 변수 초기화
volatile int state = IDLE;           // 현재 상태를 나타내는 전역변수, 현재는 IDLE 상태

unsigned char digit[]={0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67};  //array num'0 to 9'
unsigned char fnd_sel[4]={0x01,0x02,0x04,0x08};      // FND 선택 신호 array

// SW1 : GO or STOP
ISR(INT4_vect){
	_delay_ms(100);                    // 스위치 바운스 기간 동안 기다림
	EIFR = 1 <<4;                      // 그 사이에 바운스에 의하여 생긴 인터럽트는 무효화
	if((PINE&0x10)==0x10)              // 인터럽트 입력 핀(PE4)을 다시 검사하여
	return;                            // 눌러진 상태가 아니면 ('1') 리턴
	
	if((state ==IDLE || state == STOP))  // IDLE 또는 STOP 상태라면
	state = GO;                          // GO로 상태 변경
	else{                                // GO 상태라면
		state = STOP;                    // STOP으로 상태 변경
		stop_time = cur_time;		     // 현재 시간을 복사하여 stop_time에 넣어줌
	}
}

// SW2 : RESET
ISR(INT5_vect){
	_delay_ms(100);                     // 스위치 바운스 기간 동안 기다림
	EIFR= 1<<5;                         // 그 사이에 바운스에 의하여 생긴 인터럽트는 무효화
	if((PINE & 0x20)==0x20)             // 인터럽트 입력 핀(PE5)을 다시 검사하여
	return;                             // 눌러진 상태가 아니면 ('1') 리턴
	state = IDLE;                       // 상태 IDLE로 만들어줌
	cur_time = 0;                       // '현재 시간' 변수 초기화
	stop_time = 0;                      // 'STOP 시간' 변수 초기화 
}

// 함수를 main 함수보다 먼저 나타나거나 그 타입만 먼저 나오고 나중에 call하는 경우
void init_stopwatch(void);              
void display_fnd(int);

int main(){
	init_stopwatch();
	
	while(1){
		if(state==IDLE){                    // IDLE 상태이면
			display_fnd(stop_time);         // 초기값 0000 디스플레이, 시간은 가지 않음
		}
		else if (state == STOP){            // STOP 상태이면
			display_fnd(stop_time);         // SW1이 눌러진 순간의 시간 디스플레이
			cur_time++;                     // 시간은 계속 증가
		}
		else{                               // GO 상태이면
			display_fnd(cur_time);          // 경과 시간 디스플레이
			cur_time++;                     // 시간은 계속 증가
		}
		
		if(cur_time ==10000)                // '9999' 다음 '0000'
		cur_time = 0;
	}
	
}

void init_stopwatch(){
	DDRC = 0xff;              // 포트 C를 FND 데이터 신호로 사용
	DDRG = 0x0f;              // 포트 G를 FND 선택 신호로 사용
	DDRE = 0x00;              // PE 포트를 입력 신호로 사용
	sei();                    // SREG = 0x80과 동일한 기능
	
	EICRB=0x0a;               // INT4, INT5 트리거는 falling edge
	EIMSK=0x30;               // INT4, INT5 인터럽트 enable
	
}

void display_fnd(int count){       // 1회 수행 시간 = 100*10ms = 1000ms(1초)
	int i,j, fnd[4];
	
	fnd[3] = (count/1000)%10;      // 천의 자리
	fnd[2] = (count/100)%10;       // 백의 자리
	fnd[1] = (count/10)%10;        // 십의 자리
	fnd[0] = (count/1)%10;         // 일의 자리
	
	for(j=0;j<100;j++){
		for(i=0;i<4;i++){
			
			PORTC = digit[fnd[i]];
			PORTG = fnd_sel[i];
			
			//delay
			if(i%2){
				_delay_ms(2);     // i가 홀수일 때 2ms
			}
			else{
				_delay_ms(3);      // i가 짝수일 때 3ms
			}
			
		}
	}
	

}

