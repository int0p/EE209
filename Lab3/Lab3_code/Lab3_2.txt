/*
 * Lab3_2.c
 * 문제2. 다음 조건을 만족하는 '시한폭탄 카운트 계수기'를 제작한다.
 - FND 디스플레이는 1/10초마다 1씩 감소한다.
 - 초기 값은 '9999'이고 '0000'이 되면 정지한다.
 - SW1을 한 번 누르면 정지하고 한 번 더 누르면 다시 진행한다.
 - SW2를 누르면 디스플레이는 현재 값보다 '1000'이 증가한다.
  (단, 최대값인 '9999'보다 클 수는 없다.)
 */ 

#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#define IDLE 0
#define STOP 1
#define GO 2

volatile int cur_time = 9999;
volatile int stop_time = 9999;
volatile int state = IDLE;

unsigned char digit[]={0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67};  //array num'0 to 9'
unsigned char fnd_sel[4]={0x01,0x02,0x04,0x08};


ISR(INT4_vect){                     //sw1: state가 idle, stop일땐 go로, go일땐 stop으로 state를 바꿈.

	_delay_ms(100);
	EIFR = 1 <<4;
	if((PINE&0x10)==0x10)
	return;
	if(state ==IDLE ){              //9999에서 0000이 되어 정지 한 후, 다시 sw1을 눌렀을때 9999부터 시작하기 위함.
		cur_time = 9999;
		stop_time = 9999;
		state = GO;
	}
	else if (state == STOP){        //state가 stop이었으면 스위치를 눌렀을 때 go로
		state = GO;
	}
	else{                          //state가 go였으면 스위치를 눌렀을 때 stop으로.
		state = STOP;
		stop_time = cur_time;
	}
}

ISR(INT5_vect){                    //sw2: time을 1000증가시킴. (단, state가 idle, stop일땐 stop상태에서/ state가 go일땐 go 상태에서 증가)
	_delay_ms(100);
	EIFR= 1<<5;
	if((PINE & 0x20)==0x20)
	return;
	
	if((state == IDLE || state == STOP)){
		state = STOP;
	}
	else{
		state = GO;
	}
	
	cur_time += 1000;
	
	//current time은 9999보다 클 수 없음.
	if (cur_time >=9999){
		cur_time = 9999;
	}
	stop_time = cur_time;
}

// 함수를 main 함수보다 먼저 나타나거나 그 타입만 먼저 나오고 나중에 call하는 경우
void init_stopwatch(void);
void display_fnd(int);

int main(){
	init_stopwatch();
	
	while(1){
		if(state==IDLE){
			display_fnd(stop_time);
		}
		else if (state == STOP){
			display_fnd(stop_time);
			cur_time--;                  //stop에도 시간은 계속 흐름.
		}
		else{
			display_fnd(cur_time);
			cur_time--;
		}
		
		if(cur_time == 0){               //0이 되면 정지
			cur_time = 0000;
			stop_time = 0000;
			state = IDLE;
		}
	}
	
}

void init_stopwatch(){
	DDRC = 0xff;              // 포트 C를 FND 데이터 신호로 사용
	DDRG = 0x0f;              // 포트 G를 FND 선택 신호로 사용
	DDRE = 0x00;              // PE 포트를 입력 신호로 사용
	sei();                    // SREG = 0x80과 동일한 기능
	
	EICRB=0x0a;               // INT4, INT5 트리거는 falling edge
	EIMSK=0x30;               // INT4, INT5 인터럽트 enable
	
}

void display_fnd(int count){       // 1회 수행 시간 = 10*10ms = 100ms(0.1초)
	int i,j, fnd[4];
	
	fnd[3] = (count/1000)%10;      // 천의 자리
	fnd[2] = (count/100)%10;       // 백의 자리
	fnd[1] = (count/10)%10;        // 십의 자리
	fnd[0] = (count/1)%10;         // 일의 자리
	
	for(j=0;j<10;j++){
		for(i=0;i<4;i++){
			
			PORTC = digit[fnd[i]];
			PORTG = fnd_sel[i];
			
			//delay
			if(i%2){
				_delay_ms(2);
			}
			else{
				_delay_ms(3);
			}
			
		}
	}
	

}