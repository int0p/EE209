/*
 * Lab3_3.c
 * 문제3. 다음의 조건을 만족하는 '엘리베이터 층 수 표시기'를 제작한다.
 - 건물 층은 지하3층부터 지상 22층까지 있다.
 - 엘리베이터는 2초마다 1층씩 올라가거나 내려오며, 최상층이나 최하층에 도달하면 자동으로 이동 방향이 바뀐다.
 - 엘리베이터 층 수 숫자 표시는 FND의 가운데 2개만 사용하여 디스플레이하며, 지하 표시는 숫자 앞에 '-'를 붙여 구분한다.
 (예, 지하 1층은 '-1' 표시)
 - SW1은 한 번 누르면 정지하고 한 번 더 누르면 다시 진행한다.
 - SW2는 한 번 누를 때마다 엘리베이터의 이동 방향이 바뀐다.
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL
#include <util/delay.h>

#define IDLE 0                  // 초기값
#define STOP 1                  // 정지
#define GO 2                    // 오르거나 내려가도록 함

#define Upward 3                // 올라가는 방향
#define Downward 4              // 내려가는 방향

volatile int cur_stair = 1;                      // 1층이 초기값이라고 가정
volatile int stop_stair = 1;
volatile int state = IDLE;                       // IDLE, STOP, GO가 될 수 있음, 초기값은 IDLE로 설정
volatile int direction = Upward;                 // Upward, Downward가 될 수 있음, 초기값은 올라가는 방향으로 설정

unsigned char digit[]={0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67};  // array num '0 to 9'
unsigned char fnd_sel[2]={0x02,0x04};


ISR(INT4_vect){                          //sw1을 누르면 정지하고, 다시 누르면 진행
	_delay_ms(100);
	EIFR = 1 <<4;
	
	if((PINE&0x10)==0x10)
	return;
	
	if((state == IDLE || state == STOP))
	state = GO;
	else{
		state = STOP;
		stop_stair = cur_stair;
	}
	
}



ISR(INT5_vect){                          //sw2를 누르면 엘리베이터의 이동방향 변화.
	_delay_ms(100);
	EIFR= 1<<5;
	if((PINE & 0x20)==0x20)
	return;
	
	state = GO;
	
	//current direction의 방향 전환
	if (direction == Upward){            // 올라가는 방향이면
		direction = Downward;            // 내려가는 방향으로 변화
	}
	else if (direction == Downward){     // 내려가는 방향이면
		direction = Upward;              // 올라가는 방향으로 변화
	}
	stop_stair = cur_stair;
	
}

// 함수를 main 함수보다 먼저 나타나거나 그 타입만 먼저 나오고 나중에 call하는 경우
void init_elevator(void);
void display_fnd(int);

int main(){
	init_elevator();
	
	while(1){
		
		//GO, STOP, IDLE 상태에 따른 display설정.
		if(state==IDLE){
			display_fnd(stop_stair);
		}
		
		else if (state == STOP){
			display_fnd(stop_stair);
		}
		
		else if (state == GO){
			display_fnd(cur_stair);
			
			//방향에 따라 층수를 높이거나 내린다.
			if(direction == Upward){                // 올라가는 방향이면
				cur_stair++;                        // 층수를 높임
			}
			else if (direction == Downward){        // 내려간는 방향이면
				cur_stair--;                        // 층수를 내림
			}
		}
		
		//층수가 최고점(22층) 혹은 최저점(-3층)에 도달하면 방향을 바꾼다.
		if (cur_stair > 22){
			cur_stair=22;
			direction = Downward;
		}
		
		if (cur_stair < -3){
			cur_stair = -3;
			direction = Upward;
		}
		
	}
	
}

void init_elevator(){
	DDRC = 0xff;              // 포트 C를 FND 데이터 신호로 사용
	DDRG = 0x06;              //Fnd의 가운데 2개만 사용함.
	DDRE = 0x00;              // PE 포트를 입력 신호로 사용
	sei();
	
	EICRB=0x0a;               // INT4, INT5 트리거는 falling edge
	EIMSK=0x30;               // INT4, INT5 인터럽트 enable
	
}

void display_fnd(int stair){        //input으로 들어온 층수를 화면에 display함
	int i,j, fnd[2];
	
	if (stair > 0){                 // 지상인 경우
		fnd[1] = (stair/10)%10;     // 십의 자리
		fnd[0] = (stair/1)%10;      // 일의 자리
		
		for(j=0;j<400;j++){         // 1회 수행 시간 = 400*5ms = 2000ms(2초)
			for(i=0;i<2;i++){
				
				PORTC = digit[fnd[i]];
				PORTG = fnd_sel[i];
				
				//delay
				if(i%2){
					_delay_ms(2);
				}
				else{
					_delay_ms(3);
				}
				
			}
		}
	}
	
	else if (stair<0){                 // 지하인 경우
		for(j=0;j<400;j++){            // 1회 수행 시간 = 400*(2ms+3ms) = 2000ms(2초)
				
			//FND의 왼쪽
			PORTC = 0x40;              //'-'부호 표현
			PORTG = fnd_sel[1];
			_delay_ms(2);
			
			//FND의 오른쪽
			PORTC = digit[fnd[0]];     // input의 일의자리
			PORTG = fnd_sel[0];
			stair = (-1)*stair;        // stair을 양의 정수로 변환
			fnd[0] = (stair/1)%10;
			_delay_ms(3);
			

		}
	}
	
	else{     //0층은 존재하지 않으므로 아무동작도 실행하지 않는다.
		
	}
	
	

}


