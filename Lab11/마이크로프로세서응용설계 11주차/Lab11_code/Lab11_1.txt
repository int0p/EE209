/*
 * Lab11_1.c
 * 문제1. '스마트폰으로 가전제품 제어하기' 예제에 '온도 측정' 키를 추가하여 이 키가 눌러지면 현재 온도를 스마트폰에
 디스플레이하는 '스마트폰으로 가전제품 제어하기(V2.0)' 프로그램을 제작한다.
 1 : 전등 on         / 5 : 전등 off
 2 : 경고음 on       / 6 : 경고음 off
 3 : 선풍기 on       / 7 : 선풍기 off
 4 : 온도계 on       / 8 : 온도계 off
 9 : 현재 상태 확인  / 0 : 설정 상태 알림
 */ 

#include <avr/io.h>
#define F_CPU 16000000UL
#define F_SCK 40000UL
#define LM75A_ADDR 0x98 //A2A1A0=100인 경우 원래 7bit를 1bit left shift한 값.
#define LM75A_TEMP_REG 0 //pointer register를 temp로.
#include <util/delay.h>
#include <avr/interrupt.h>

#define ON 1
#define OFF 0
#define NULL 0

//buzzer 내부 상태 설정
#define ION 1
#define IOFF 0
volatile int buzz_inner_state = IOFF;
volatile int timer = OFF;

// 모터 속도 조절
#define STOP_SPEED 00   // duty cycle 0% 값
#define MID_SPEED 153   // duty cycle 60% 값

#define MOTOR_CW 0xb0
#define MOTOR_Standby 0x00

void init_twi_port();
void display_FND(int value);

ISR(TIMER0_OVF_vect){
   TCNT0 = 17;
   
   if(timer == ON){
      if(buzz_inner_state == ION){
         PORTE |= 1<<4;
         buzz_inner_state = IOFF;
      }
      else{
         PORTE &= ~(1<<4);
         buzz_inner_state = ION;
      }
   }
}

void putchar1(char c) // 1문자를 송신하는 함수
{
   while(!(UCSR1A & (1<<UDRE1)))
   ;
   UDR1 = c;
}

char available1() // 문자 입력을 확인하는 함수
{
   if(UCSR1A &(1<<RXC1))
      return(1);
   else return(0);
}

char getchar1() // 1문자를 수신하는 함수
{
   return(UDR1);
}

char puts1(char *ptr)  // 문자열을 송신하는 함수
{
   while(*ptr != NULL)
   putchar1(*ptr++);
}
void init_uart1()
{
   UCSR1B = 0x18;
   UCSR1C = 0x06;
   UBRR1H = 0;
   UBRR1L = 8;
}
void write_twi(char reg);
int read_twi();
int main(void)
{
	char c;
	int i, temperature; // 온도계 관련 변수
	int st_light=OFF;
	int st_buzz=OFF;
	int st_fan=OFF;
	int st_temp=OFF;
	
	DDRA = 0xff;
	DDRB = 0xf0;
	DDRE = 0x10;
   
    TCCR0 = 0x03; //32분주
    TCNT0 = 17;
    SREG |= 0x80;
    TIMSK = 0x01; //TIMER 인터럽트 활성화
   
    PORTB = MOTOR_Standby;
    init_uart1();
    init_twi_port(); // twi 및 포트 초기화
    puts1(" 1 : LED on/ 2 : BUZZ on/ 3 : MOTOR on/ 4 : TEMP on/ 5 : LED off/ 6 : BUZZ off/ 7 : MOTOR off/ 8 : TEMP off/ 9 : check state/ 0: show menu");
    putchar1('\n');
    write_twi(LM75A_TEMP_REG);
    while (1) 
    {
      if(!available1()) //수신된 정보가 없는경우
      {
         if (st_buzz == ON) // 버저 상태가 on이면
            timer = ON; // 타이머 상태를 on
		else timer = OFF;
         if (st_temp == ON)
            for (i = 0;i<30;i++)
            {
               if(i==0)  //억세스 시간(300ms) 기다리기 위하여 30번에 1번만 실제로 억세스함.
                  temperature = read_twi();
              display_FND(temperature);  // 온도값을 fnd로 표시
            }
         continue;
      }
     
      c = getchar1(); // 문자를 받아옴
      putchar1(c); // 받아온 문자가 무엇인지에 따라 다른 동작
      
      switch(c)
      {
         case '1' : PORTA = 0x03; st_light = ON; break;
         case '2' : PORTA = 0x02; st_buzz = ON;  break;
         case '3' : PORTB = MOTOR_CW; st_fan = ON; break;
         case '4' : st_temp = ON; break;
         case '5' : PORTA = 0x00; st_light = OFF; break;
         case '6' : PORTA = 0x00; st_buzz = OFF; break;
         case '7' : PORTB = MOTOR_Standby; st_fan = OFF; break;
         case '8' : st_temp = OFF; break;
         case '9' : // 각 상태가 ON이면 O를, OFF면 X를 출력
            putchar1('\n');
            if(st_light)
               putchar1('O');
            else
               putchar1('X');
            if(st_buzz)
               putchar1('O');
            else
               putchar1('X');
            if(st_fan)
               putchar1('O');
            else
               putchar1('X');
            if(st_temp)
               putchar1('O');
            else
               putchar1('X');
            break;
		case '0' :
			 PORTA = 0x00;
			 puts1(" 1 : LED on/ 2 : BUZZ on/ 3 : MOTOR on/ 4 : TEMP on/ 5 : LED off/ 6 : BUZZ off/ 7 : MOTOR off/ 8 : TEMP off/ 9 : check state/ 0: show menu");
		default: break;      
      }
    }
}

void init_twi_port(){ 
   DDRC = 0xff;
   DDRG = 0xff;
   TWSR = TWSR & 0xfc; //prescaler = 00 (1배)
   TWBR = (F_CPU/F_SCK - 16)/2; //bit rate 설정
}

void write_twi(char reg){
   /////////////////W
   //START 전송
   TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
   
   //상태체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X08);
   
   //SLA + W
   TWDR = LM75A_ADDR |0; //TWDR에 SLA + W set
   TWCR = (1<<TWINT) | (1<<TWEN); //SLA + W 전송
   
   //ACK 체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X18);
   
   //TWDR에 데이터값 set
   TWDR = reg;
   
   //데이터 전송
   TWCR = (1<<TWINT) | (1<<TWEN);
   
   //ACK 체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X28);
   
   //STOP 체크
   TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //전송
   while((TWCR &(1<<TWSTO)));//확인
}

int read_twi(){
   char high_byte, low_byte;
   
   /////////////////
   //RESTART 전송
   TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
   
   //상태체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X08);
   
   //SLA+R
   TWDR = LM75A_ADDR |1; //read
   TWCR = (1<<TWINT) | (1<<TWEN); //SLA + R 전송
   
   //ACK체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X40);
   
   //데이터 수신
   TWCR = (1<<TWINT)|(1<<TWEN|1<<TWEA); //1st data 준비(마지막 데이터가 아님)
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X50); //상태체크
   high_byte = TWDR; //상위8bit저장
   
   TWCR = (1<<TWINT) | (1<<TWEN); //2nd DATA 준비(마지막 데이터)
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X58);//상태체크
   low_byte = TWDR;
   
   //STOP 체크
   TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //전송
   while((TWCR &(1<<TWSTO)));//확인
   
   return((high_byte<<8)|low_byte); //수신 DATA retur
}
int read_twi_2byte_nopreset(char reg){
   char high_byte, low_byte;
   /////////////////W
   //START 전송
   TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
   
   //상태체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X08);
   
   //SLA + W
   TWDR = LM75A_ADDR |0; //TWDR에 SLA + W set
   TWCR = (1<<TWINT) | (1<<TWEN); //SLA + W 전송
   
   //ACK 체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X18);
   
   //TWDR에 데이터값 set
   TWDR = reg;
   
   //데이터 전송
   TWCR = (1<<TWINT) | (1<<TWEN);
   
   //ACK 체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X28);
   
   /////////////////R
   //RESTART 전송
   TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
   
   //상태체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X10);
   
   //SLA+R
   TWDR = LM75A_ADDR |1; //read
   TWCR = (1<<TWINT) | (1<<TWEN); //SLA + R 전송
   
   //ACK체크
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X40);
   
   //데이터 수신
   TWCR = (1<<TWINT)|(1<<TWEN|1<<TWEA); //1st data 준비(마지막 데이터가 아님)
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X50); //상태체크
   high_byte = TWDR; //상위8bit저장
   
   TWCR = (1<<TWINT) | (1<<TWEN); //2nd DATA 준비(마지막 데이터)
   while (((TWCR & (1<<TWINT))==0X00) || (TWSR&0Xf8) != 0X58);//상태체크
   low_byte = TWDR;
   
   //STOP 체크
   TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //전송
   while((TWCR &(1<<TWSTO)));//확인
   
   return((high_byte<<8)|low_byte); //수신 DATA return.
}

void display_FND(int value){
   char digit[12] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67, 0x00, 0x40};
   //[10]=0x00, [11]=0x40(-부호)
   char fnd_sel[4] = {0x01,0x02,0x04,0x08};
   int value_int, value_deci, num[4], i;
   
   //sign검사
   if((value & 0x8000)!=0x8000){
      num[3] = 10;//양수일 경우 아무것도 표시 안 함.
   }
   else{//음수일 경우 -부호 표시 후 2의 보수 취함.
      num[3] = 11;
      value = (~value)+1;
   }
   
   value_int = (value & 0x7f00) >> 8; //정수값: High byte bit 6~0
   value_deci = (value & 0x0080); //소수 첫째자리 값: Low byte bit7
   num[2] = (value_int/10) % 10;
   num[1] = value_int % 10;
   num[0] = (value_deci == 0x80) ? 7:0;
   //소수 첫째자리가 1이면 0.5에 해당하므로 5를 표시함. (fnd고장 -> 5가운데 안 떠서 7로 변경)
   
   for (i = 0;i<4; i++){
      PORTC = digit[num[i]];
      PORTG = fnd_sel[i];
      if(i==1) PORTC |= 0x80; //왼쪽에서 3번째 FND에는 소수점(.)찍음.
      if(i%2) _delay_ms(2);
      else _delay_ms(3);
   }
}