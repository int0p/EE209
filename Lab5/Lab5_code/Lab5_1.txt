/*
 * MOTOR_1.c
 *
 * 문제1. 모터 제어 회로에 스위치 2개 SW1, SW2를 추가하여, SW1을 누르면 모터가 정방향으로 회전하고,
  SW2를 누르면 모터가 역방향으로 회전하도록 한다.
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL
#define __DELAY_BACKWARD_COMPATIBLE__

#include <util/delay.h>

// 모터 제어 (PB7=AIN1, PB6=AIN2, PB5=PWMA, PB4=STBY)
#define MOTOR_CW 0xb0          // 모터 Forward : AIN1=1, AIN2=0, PWMA=1, STBY=1
#define MOTOR_CCW 0x70         // 모터 Reverse : AIN1=0, AIN2=1, PWMA=1, STBY=1

volatile int state = MOTOR_CW; // 초기 상태 : 모터 정방향

ISR(INT4_vect)                 // SW1 : 모터 정방향
{
	_delay_ms(100);            // 스위치 바운스 기간 동안 기다림
	EIFR = 1 << 4;             // 그 사이에 바운스에 의하여 생긴 인터럽트는 무효화
	if((PINE & 0x10)==0x10)    // 인터럽트 입력 핀(PE4)을 다시 검사하여
	return;                    // 눌러진 상태가 아니면 ('1')리턴
	
	state = MOTOR_CW;          // 모터를 정방향으로 바꿈
}

ISR(INT5_vect)                 // SW2 : 모터 역방향
{
	_delay_ms(100);            // 스위치 바운스 기간 동안 기다림
	EIFR = 1 << 5;             // 그 사이에 바운스에 의하여 생긴 인터럽트는 무효화
	if((PINE & 0x20)==0x20)    // 인터럽트 입력 핀(PE5)을 다시 검사하여
	return;                    // 눌러진 상태가 아니면 ('1')리턴
	
	state = MOTOR_CCW;         // 모터를 정방향으로 바꿈
}

int main(void)
{	
	DDRB = 0xf0;              // PB7~4 출력 처리
	DDRA = 0x0f;              // LED 출력
	DDRE = 0x00;              // PE포트 입력 신호
	sei();                    // SREG 7번 비트(I) 활성화, SREG |= 0x80과 동인한 기능
	
	EICRB = 0x0a;             // INT4, INT5 트리거 = 하강 에지
	EIMSK = 0x30;             // INT4, INT5 인터럽트 enable
	
	while (1)
	{
		if (state == MOTOR_CW)         // 모터 상태가 정방향이면
		{
			PORTB = MOTOR_CW;          // 모터 정방향
			PORTA = 0x03;              // 오른쪽 LED 2개를 켬
			_delay_ms(100);
		}
		else if(state == MOTOR_CCW)    // 모터 상태가 역방향이면
		{
			PORTB = MOTOR_CCW;         // 모터 역방향
			PORTA = 0x0c;              // 왼쪽 LED 2개를 켬
			_delay_ms(100);
		}
	}
}